{"version":3,"sources":["components/Clock.jsx","components/useWatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Clock","time","interval","useState","Date","now","updateTime","useEffect","timeoutId","setTimeout","clearTimeout","useWatch","clock","dateString","getFullYear","getMonth","slice","getDate","timeString","getHours","getMinutes","getSeconds","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEe,SAASA,IACtB,IAAMC,ECDO,SAAkBC,GAAW,IAAD,EACdC,mBAASC,KAAKC,OADA,mBAClCJ,EADkC,KAC5BK,EAD4B,KAUzC,OAPAC,qBAAU,WACR,IAAMC,EAAYC,YAAW,kBAAMH,EAAWF,KAAKC,SAAQH,GAC3D,OAAO,WACLQ,aAAaF,MAEd,CAACP,IAEGA,EDTMU,CAAS,KAChBC,EAAQ,IAAIR,KAAKH,GACjBY,EAAU,UAAMD,EAAME,cAAZ,aAA8B,MAAQF,EAAMG,WAAa,IAAIC,OAAO,GAApE,aAA2E,KAAOJ,EAAMK,WAAWD,OAAO,IACpHE,EAAU,WAAO,KAAON,EAAMO,YAAYH,OAAO,GAAvC,aAA8C,KAAOJ,EAAMQ,cAAcJ,OAAO,GAAhF,aAAuF,KAAOJ,EAAMS,cAAcL,OAAO,IACzI,OACE,qCACE,8DAAuBH,IACvB,8DAAuBK,IAFzB,2KEwBWI,MA7Bf,WACE,OACE,+DACE,iEACE,cAACtB,EAAD,MAFJ,mPCOWuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16738f4b.chunk.js","sourcesContent":["import useWatch from \"./useWatch\";\n\nexport default function Clock() {\n  const time = useWatch(100)\n  const clock = new Date(time)\n  const dateString = `${clock.getFullYear()}/${('00' + (clock.getMonth() + 1)).slice(-2)}/${('00' + clock.getDate()).slice(-2)}`\n  const timeString = `${('00' + clock.getHours()).slice(-2)}:${('00' + clock.getMinutes()).slice(-2)}:${('00' + clock.getSeconds()).slice(-2)}`\n  return (\n    <>\n      <div className=\"date\">{dateString}</div>\n      <div className=\"time\">{timeString}</div>\n      <style jsx>\n        {`\n          .date {\n            text-align: center;\n            font-size: 1.5rem;\n          }\n          .time {\n            text-align: center;\n            font-size: 2.5rem;\n          }\n        `}\n      </style>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport default function useWatch(interval) {\n  const [time, updateTime] = useState(Date.now());\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => updateTime(Date.now()), interval);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [time]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return time;\n}","import './App.css';\nimport Clock from './components/Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <Clock />\n      </div>\n      <style jsx>\n        {`\n        .content {\n          position: fixed;\n          left: 0;\n          right: 0;\n          top: 0;\n        }\n        `}\n      </style>\n      <style jsx global>\n        {`\n        body {\n          font-family: 'M PLUS 1p', sans-serif;\n          color: white;\n          background-color: #3A393A;\n        }\n        `}\n      </style>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}